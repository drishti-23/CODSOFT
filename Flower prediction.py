# -*- coding: utf-8 -*-
"""CodSoft project 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d1I4mYkzohvWQLmi41AfzyINczGfmIpk

## **CODSOFT Project 1**

Used the Iris dataset to develop a model that can classify iris
flowers into different species based on their sepal and petal
measurements.

Here I have used logistic Regreesion and Decision Tree to classify the iris dataset into different species based its sepal and petal

## **Importing liabraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier

"""#**Uploading data**"""

data= pd.read_csv("/content/IRIS.csv")
print (data)

# getting top five dataset

data.head()

"""#**Data Overview**"""

data.species.value_counts()

data.info()

#checking for null values
data.isnull()

'''data["species"].replace({"Iris-setosa":0 , "Iris-versicolor":1 , "Iris-virginica":2} , inplace = True)
data'''

data.describe()

data.nunique()

"""***Unique Values***"""

data.species.unique()

data.sepal_length.unique()

data.petal_length.unique()

data.petal_width.unique()

"""##**Data Visualization**"""

#Histogram showing no of species

fig = px.histogram(data_frame=data, x='species', title='total no of species', color='species')

fig.show()

#Creatinmg histogram for diffrent columns showing the frequencies of diffrent columns using plotly library

def Histogram(column):
  global data
  fig = go.Figure()
  fig.add_trace(go.Histogram(x=data[column], marker_color='red', marker_line_color = 'black', marker_line_width = 1.2))

  fig.update_layout(title = f'Histogram of {column}',
                    xaxis_title = column,
                    yaxis_title='Frequency',
                    template = 'plotly_dark')

  fig.show()

Histogram('sepal_length')

Histogram('petal_length')

Histogram('sepal_width')

Histogram('petal_width')

# creating box plot

plt.subplot(2,2,1)
sns.boxplot(data['sepal_length'], color = 'blue')

plt.subplot(2,2,2)
sns.boxplot(data['sepal_width'], color = 'blue')

plt.subplot(2,2,3)
sns.boxplot(data['petal_length'], color = 'blue')

plt.subplot(2,2,4)
sns.boxplot(data['petal_width'], color = 'blue')

plt.tight_layout()
plt.show()

# Pair plots to visualize relationships between features
palette = 'viridis'
sns.set_style('whitegrid')
sns.pairplot(data, hue='species', palette=palette)
plt.show()

# making comparision between sepal_length and width and in between petal_length and width
fig, ax = plt.subplots(1, 2, figsize=(15, 6))
ax[0].plot(data['sepal_length'], label='sepal_length',color='pink')
ax[0].plot(data['sepal_width'], label='sepal_width',color='lightblue')
ax[0].set_title('Sepal length vs Sepal width')
ax[0].legend()

ax[1].plot(data['petal_length'], label='petal_length',color='pink')
ax[1].plot(data['petal_width'], label='petal_width',color='lightblue')
ax[1].set_title('Petal length vs Petal width')
ax[1].legend()

plt.show()

"""***These visualization helped to understand the relationship between Iris species and features. It makes it clear and easy to classify and analyze these floers based on their mearurements***

# **Modeling**
"""

le = LabelEncoder()

data['species']= le.fit_transform(data['species'])
data

X = data.drop('species', axis = 1)
Y = data['species']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42)

lor = LogisticRegression()
lor.fit(X_train, Y_train)

test= lor.predict(X_test)
for t in test:
  print("->", t)

lor.score(X_test, Y_test)

Y_test.values

classify = DecisionTreeClassifier()

classify.fit(X_train, Y_train)

Y_pred = classify.predict(X_test)

accuracy = accuracy_score(Y_test, Y_pred)
report = classification_report(Y_test, Y_pred)

print(f"Accuracy: {accuracy}")
print ("Classification Report:\n", report)

# PLottig decision tree

F = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
T = ['0', '1', '2']
fig = plt.figure(figsize = (25, 20))
plt = tree.plot_tree(classify, feature_names = F, class_names = T, filled = True)